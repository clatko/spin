/*
 * Spinnaker API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"bytes"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"golang.org/x/net/context"
	"golang.org/x/oauth2"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"os"
	"path/filepath"
	"reflect"
	"regexp"
	"strconv"
	"strings"
	"time"
	"unicode/utf8"

	//debug
	"net/http/httputil"
	// SAML
	"compress/gzip"
	"github.com/spinnaker/spin/util"
	"golang.org/x/net/html"
	"io/ioutil"
)

var (
	jsonCheck = regexp.MustCompile("(?i:[application|text]/json)")
	xmlCheck  = regexp.MustCompile("(?i:[application|text]/xml)")
)

// APIClient manages communication with the Spinnaker API API v1.0.0
// In most cases there should be only one, shared, APIClient.
type APIClient struct {
	cfg    *Configuration
	common service // Reuse a single struct instead of allocating one for each service on the heap.

	// API Services
	AmazonInfrastructureControllerApi *AmazonInfrastructureControllerApiService
	ApplicationControllerApi          *ApplicationControllerApiService
	ArtifactControllerApi             *ArtifactControllerApiService
	AuditEventsMvcEndpointApi         *AuditEventsMvcEndpointApiService
	AuthControllerApi                 *AuthControllerApiService
	BakeControllerApi                 *BakeControllerApiService
	BuildControllerApi                *BuildControllerApiService
	ClusterControllerApi              *ClusterControllerApiService
	ConcourseControllerApi            *ConcourseControllerApiService
	CredentialsControllerApi          *CredentialsControllerApiService
	EcsServerGroupEventsControllerApi *EcsServerGroupEventsControllerApiService
	ExecutionsControllerApi           *ExecutionsControllerApiService
	FirewallControllerApi             *FirewallControllerApiService
	ImageControllerApi                *ImageControllerApiService
	InstanceControllerApi             *InstanceControllerApiService
	JobControllerApi                  *JobControllerApiService
	LoadBalancerControllerApi         *LoadBalancerControllerApiService
	NetworkControllerApi              *NetworkControllerApiService
	PipelineConfigControllerApi       *PipelineConfigControllerApiService
	PipelineControllerApi             *PipelineControllerApiService
	PipelineTemplatesControllerApi    *PipelineTemplatesControllerApiService
	ProjectControllerApi              *ProjectControllerApiService
	PubsubSubscriptionControllerApi   *PubsubSubscriptionControllerApiService
	ReorderPipelinesControllerApi     *ReorderPipelinesControllerApiService
	SearchControllerApi               *SearchControllerApiService
	SecurityGroupControllerApi        *SecurityGroupControllerApiService
	ServerGroupControllerApi          *ServerGroupControllerApiService
	ServerGroupManagerControllerApi   *ServerGroupManagerControllerApiService
	SnapshotControllerApi             *SnapshotControllerApiService
	SubnetControllerApi               *SubnetControllerApiService
	TaskControllerApi                 *TaskControllerApiService
	V2CanaryConfigControllerApi       *V2CanaryConfigControllerApiService
	V2CanaryControllerApi             *V2CanaryControllerApiService
	V2PipelineTemplatesControllerApi  *V2PipelineTemplatesControllerApiService
	VersionControllerApi              *VersionControllerApiService
	WebhookControllerApi              *WebhookControllerApiService
}

type service struct {
	client *APIClient
}

// NewAPIClient creates a new API client. Requires a userAgent string describing your application.
// optionally a custom http.Client to allow for advanced features such as caching.
func NewAPIClient(cfg *Configuration) *APIClient {
	if cfg.HTTPClient == nil {
		cfg.HTTPClient = http.DefaultClient
	}

	c := &APIClient{}
	c.cfg = cfg
	c.common.client = c

	// API Services
	c.AmazonInfrastructureControllerApi = (*AmazonInfrastructureControllerApiService)(&c.common)
	c.ApplicationControllerApi = (*ApplicationControllerApiService)(&c.common)
	c.ArtifactControllerApi = (*ArtifactControllerApiService)(&c.common)
	c.AuditEventsMvcEndpointApi = (*AuditEventsMvcEndpointApiService)(&c.common)
	c.AuthControllerApi = (*AuthControllerApiService)(&c.common)
	c.BakeControllerApi = (*BakeControllerApiService)(&c.common)
	c.BuildControllerApi = (*BuildControllerApiService)(&c.common)
	c.ClusterControllerApi = (*ClusterControllerApiService)(&c.common)
	c.ConcourseControllerApi = (*ConcourseControllerApiService)(&c.common)
	c.CredentialsControllerApi = (*CredentialsControllerApiService)(&c.common)
	c.EcsServerGroupEventsControllerApi = (*EcsServerGroupEventsControllerApiService)(&c.common)
	c.ExecutionsControllerApi = (*ExecutionsControllerApiService)(&c.common)
	c.FirewallControllerApi = (*FirewallControllerApiService)(&c.common)
	c.ImageControllerApi = (*ImageControllerApiService)(&c.common)
	c.InstanceControllerApi = (*InstanceControllerApiService)(&c.common)
	c.JobControllerApi = (*JobControllerApiService)(&c.common)
	c.LoadBalancerControllerApi = (*LoadBalancerControllerApiService)(&c.common)
	c.NetworkControllerApi = (*NetworkControllerApiService)(&c.common)
	c.PipelineConfigControllerApi = (*PipelineConfigControllerApiService)(&c.common)
	c.PipelineControllerApi = (*PipelineControllerApiService)(&c.common)
	c.PipelineTemplatesControllerApi = (*PipelineTemplatesControllerApiService)(&c.common)
	c.ProjectControllerApi = (*ProjectControllerApiService)(&c.common)
	c.PubsubSubscriptionControllerApi = (*PubsubSubscriptionControllerApiService)(&c.common)
	c.ReorderPipelinesControllerApi = (*ReorderPipelinesControllerApiService)(&c.common)
	c.SearchControllerApi = (*SearchControllerApiService)(&c.common)
	c.SecurityGroupControllerApi = (*SecurityGroupControllerApiService)(&c.common)
	c.ServerGroupControllerApi = (*ServerGroupControllerApiService)(&c.common)
	c.ServerGroupManagerControllerApi = (*ServerGroupManagerControllerApiService)(&c.common)
	c.SnapshotControllerApi = (*SnapshotControllerApiService)(&c.common)
	c.SubnetControllerApi = (*SubnetControllerApiService)(&c.common)
	c.TaskControllerApi = (*TaskControllerApiService)(&c.common)
	c.V2CanaryConfigControllerApi = (*V2CanaryConfigControllerApiService)(&c.common)
	c.V2CanaryControllerApi = (*V2CanaryControllerApiService)(&c.common)
	c.V2PipelineTemplatesControllerApi = (*V2PipelineTemplatesControllerApiService)(&c.common)
	c.VersionControllerApi = (*VersionControllerApiService)(&c.common)
	c.WebhookControllerApi = (*WebhookControllerApiService)(&c.common)

	return c
}

func atoi(in string) (int, error) {
	return strconv.Atoi(in)
}

// selectHeaderContentType select a content type from the available list.
func selectHeaderContentType(contentTypes []string) string {
	if len(contentTypes) == 0 {
		return ""
	}
	if contains(contentTypes, "application/json") {
		return "application/json"
	}
	return contentTypes[0] // use the first content type specified in 'consumes'
}

// selectHeaderAccept join all accept types and return
func selectHeaderAccept(accepts []string) string {
	if len(accepts) == 0 {
		return ""
	}

	if contains(accepts, "application/json") {
		return "application/json"
	}

	return strings.Join(accepts, ",")
}

// contains is a case insenstive match, finding needle in a haystack
func contains(haystack []string, needle string) bool {
	for _, a := range haystack {
		if strings.ToLower(a) == strings.ToLower(needle) {
			return true
		}
	}
	return false
}

// Verify optional parameters are of the correct type.
func typeCheckParameter(obj interface{}, expected string, name string) error {
	// Make sure there is an object.
	if obj == nil {
		return nil
	}

	// Check the type is as expected.
	if reflect.TypeOf(obj).String() != expected {
		return fmt.Errorf("Expected %s to be of type %s but received %s.", name, expected, reflect.TypeOf(obj).String())
	}
	return nil
}

// parameterToString convert interface{} parameters to string, using a delimiter if format is provided.
func parameterToString(obj interface{}, collectionFormat string) string {
	var delimiter string

	switch collectionFormat {
	case "pipes":
		delimiter = "|"
	case "ssv":
		delimiter = " "
	case "tsv":
		delimiter = "\t"
	case "csv":
		delimiter = ","
	}

	if reflect.TypeOf(obj).Kind() == reflect.Slice {
		return strings.Trim(strings.Replace(fmt.Sprint(obj), " ", delimiter, -1), "[]")
	}

	return fmt.Sprintf("%v", obj)
}

// callAPI do the request.
func (c *APIClient) callAPI(request *http.Request) (*http.Response, error) {
	if c.cfg.Debug {
		requestDump, requestDumpErr := httputil.DumpRequest(request, true)
		if requestDumpErr != nil {
			fmt.Println(requestDumpErr)
			os.Exit(1)
		}

		fmt.Println("===Request===")
		fmt.Println(string(requestDump))
		fmt.Println("=============")
	}
	// execute request
	resp, err := c.cfg.HTTPClient.Do(request)

	if c.cfg.Debug {
		responseDump, responseDumpErr := httputil.DumpResponse(resp, true)

		if responseDumpErr != nil {
			fmt.Println(responseDumpErr)
		} else {
			fmt.Println("===Response===")
			fmt.Println(string(responseDump))
			fmt.Println("=============")
		}
	}

	return c.authBypass(request, resp), err
}

func (c *APIClient) callSAMLAuth(request *http.Request) (*http.Response, error) {
	if c.cfg.Debug {
		requestDump, err := httputil.DumpRequest(request, true)
		if err != nil {
			fmt.Println(err)
		}
		fmt.Println("===Request===")
		fmt.Println(string(requestDump))
		fmt.Println("=============")
	}

	resp, err := c.cfg.HTTPClient.Do(request)

	if c.cfg.Debug {
		responseDump, err := httputil.DumpResponse(resp, true)
		if err != nil {
			fmt.Println(err)
		}
		fmt.Println("===Response===")
		fmt.Println(string(responseDump))
		fmt.Println("=============")
	}

	return resp, err
}

func (c *APIClient) authBypass(request *http.Request, response *http.Response) *http.Response {
	// return response if no auth needed
	auth := c.cfg.CliConfig.Auth
	if auth != nil && auth.Enabled && auth.Saml != nil && auth.Saml.IsValid() {

		if response.Header.Get("X-Spinnaker-Request-Id") != "" {
			return response
		}

		// clear cookies cache
		util.CookiesClear()

		// auth is required
		// # Add Session Cookies: SESSION 0df4c771-3f42-4556-87f9-01fbb3752f11
		var authUrl, samlRequest, loginUrl string
		util.CookiesAdd(response)

		authUrl, samlRequest = authGetRedirectInfo(response)

		if c.cfg.Debug {
			fmt.Println("url:", authUrl)
			fmt.Println("SAMLRequest:", samlRequest)
		}

		if authUrl == "" || samlRequest == "" {
			return response
		}

		// redirect to keycloak
		form := url.Values{}
		form.Add("SAMLRequest", samlRequest)

		r, _ := http.NewRequest("POST", authUrl, strings.NewReader(form.Encode()))
		r.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		r.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
		r.Header.Set("Accept-Encoding", "gzip, deflate, br")

		resp, _ := c.callSAMLAuth(r)

		loginUrl = authGetLoginURL(resp)
		//fmt.Println("--> ", loginUrl)
		u, _ := url.Parse(loginUrl)
		uri := u.Scheme + "://" + u.Host + u.Path
		if c.cfg.Debug {
			fmt.Println("url: ", u.RequestURI())
			fmt.Println("queries:", u.Query())
		}

		// login with password/username
		form = url.Values{}
		form.Add("username", auth.Saml.Username)
		form.Add("password", auth.Saml.Password)
		r, _ = http.NewRequest("POST", uri, strings.NewReader(form.Encode()))
		r.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		r.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
		r.URL.RawQuery = u.Query().Encode()

		resp, _ = c.callSAMLAuth(r)

		// Add Keycloack Cookies
		//Set-Cookie: KC_RESTART=; Version=1; Expires=Thu, 01-Jan-1970 00:00:10 GMT; Max-Age=0; Path=/auth/realms/cjis-ins/; HttpOnly
		//Set-Cookie: KEYCLOAK_IDENTITY=eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIzZTNlNmVmNy0xOWVlLTQzM2YtODYzMS03N2J
		util.CookiesAdd(resp)

		// getSaml
		idpUrl, samlResponse := authGetSamlResponse(resp)
		if idpUrl == "" || samlResponse == "" {
			fmt.Println("Failed to Login ! Check your Username/Password or permission access...")
			os.Exit(1)
		}
		if c.cfg.Debug {
			fmt.Println("keycloack idp: ", idpUrl)
			fmt.Println("Saml response: ", samlResponse)
		}

		// Authenticate back to Spinnaker with SAML Response
		form = url.Values{}
		form.Add("SAMLResponse", samlResponse)
		r, _ = http.NewRequest("POST", idpUrl, strings.NewReader(form.Encode()))
		r.Header.Set("Content-Type", "application/x-www-form-urlencoded")
		r.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
		r.Header.Set("Accept-Encoding", "gzip, deflate, br")

		resp, _ = c.callSAMLAuth(r)

		return resp
	}

	return response
}

func authGetRedirectInfo(response *http.Response) (string, string) {
	htmlTokenizer := html.NewTokenizer(response.Body)
	var authUrl, samlRequest string

L_Parse:
	for {
		tt := htmlTokenizer.Next()

		switch {
		case tt == html.ErrorToken:
			break L_Parse
		case tt == html.StartTagToken:
			t := htmlTokenizer.Token()
			if t.Data == "form" {
				for _, a := range t.Attr {
					if a.Key == "action" {
						authUrl = a.Val
						break
					}
				}
			}
		case tt == html.SelfClosingTagToken:
			t := htmlTokenizer.Token()
			if t.Data == "input" {
				for _, a := range t.Attr {
					if a.Key == "value" {
						samlRequest = a.Val
						break L_Parse
					}
				}
			}
		}
	}

	return authUrl, samlRequest
}

func authGetLoginURL(response *http.Response) string {
	var loginUrl string
	// response send in gzipped format
	dataReader, _ := gzip.NewReader(response.Body)
	defer dataReader.Close()

	htmlTokenizer := html.NewTokenizer(dataReader)

L_Parse:
	for {
		tt := htmlTokenizer.Next()

		switch {
		case tt == html.ErrorToken:
			break L_Parse
		case tt == html.StartTagToken:
			t := htmlTokenizer.Token()
			if t.Data == "form" {
				for _, a := range t.Attr {
					if a.Key == "action" {
						loginUrl = a.Val
						break L_Parse
					}
				}
			}
		}
	}

	// debug
	io.Copy(os.Stdout, dataReader)
	return loginUrl
}

func authGetSamlResponse(response *http.Response) (string, string) {
	var idpUrl, samlResponse string
	var re = regexp.MustCompile(`<FORM[^>]*ACTION="([^"]*)".*<INPUT[^>]*NAME="SAMLResponse"[^>]*VALUE="([^"]*)"`)

	if response.StatusCode == http.StatusOK {
		defer response.Body.Close()
		bodyBytes, err := ioutil.ReadAll(response.Body)
		if err != nil {
			fmt.Println(err)
			return "", ""
		}

		bodyString := string(bodyBytes)

		matches := re.FindStringSubmatch(bodyString)
		if len(matches) == 3 {
			idpUrl = matches[1]
			samlResponse = matches[2]
		}

	}
	return idpUrl, samlResponse
}

// Change base path to allow switching to mocks
func (c *APIClient) ChangeBasePath(path string) {
	c.cfg.BasePath = path
}

// prepareRequest build the request
func (c *APIClient) prepareRequest(
	ctx context.Context,
	path string, method string,
	postBody interface{},
	headerParams map[string]string,
	queryParams url.Values,
	formParams url.Values,
	fileName string,
	fileBytes []byte) (localVarRequest *http.Request, err error) {

	var body *bytes.Buffer

	// Detect postBody type and post.
	if postBody != nil {
		contentType := headerParams["Content-Type"]
		if contentType == "" {
			contentType = detectContentType(postBody)
			headerParams["Content-Type"] = contentType
		}

		body, err = setBody(postBody, contentType)
		if err != nil {
			return nil, err
		}
	}

	// add form parameters and file if available.
	if len(formParams) > 0 || (len(fileBytes) > 0 && fileName != "") {
		if body != nil {
			return nil, errors.New("Cannot specify postBody and multipart form at the same time.")
		}
		body = &bytes.Buffer{}
		w := multipart.NewWriter(body)

		for k, v := range formParams {
			for _, iv := range v {
				if strings.HasPrefix(k, "@") { // file
					err = addFile(w, k[1:], iv)
					if err != nil {
						return nil, err
					}
				} else { // form value
					w.WriteField(k, iv)
				}
			}
		}
		if len(fileBytes) > 0 && fileName != "" {
			w.Boundary()
			//_, fileNm := filepath.Split(fileName)
			part, err := w.CreateFormFile("file", filepath.Base(fileName))
			if err != nil {
				return nil, err
			}
			_, err = part.Write(fileBytes)
			if err != nil {
				return nil, err
			}
			// Set the Boundary in the Content-Type
			headerParams["Content-Type"] = w.FormDataContentType()
		}

		// Set Content-Length
		headerParams["Content-Length"] = fmt.Sprintf("%d", body.Len())
		w.Close()
	}

	// Setup path and query parameters
	url, err := url.Parse(path)
	if err != nil {
		return nil, err
	}

	// Adding Query Param
	query := url.Query()
	for k, v := range queryParams {
		for _, iv := range v {
			query.Add(k, iv)
		}
	}

	// Encode the parameters.
	url.RawQuery = query.Encode()

	// Generate a new request
	if body != nil {
		localVarRequest, err = http.NewRequest(method, url.String(), body)
	} else {
		localVarRequest, err = http.NewRequest(method, url.String(), nil)
	}
	if err != nil {
		return nil, err
	}

	// add header parameters, if any
	if len(headerParams) > 0 {
		headers := http.Header{}
		for h, v := range headerParams {
			headers.Set(h, v)
		}
		localVarRequest.Header = headers
	}

	// Override request host, if applicable
	if c.cfg.Host != "" {
		localVarRequest.Host = c.cfg.Host
	}

	// Add the user agent to the request.
	localVarRequest.Header.Add("User-Agent", c.cfg.UserAgent)

	if ctx != nil {
		// add context to the request
		localVarRequest = localVarRequest.WithContext(ctx)

		// Walk through any authentication.

		// OAuth2 authentication
		if tok, ok := ctx.Value(ContextOAuth2).(oauth2.TokenSource); ok {
			// We were able to grab an oauth2 token from the context
			var latestToken *oauth2.Token
			if latestToken, err = tok.Token(); err != nil {
				return nil, err
			}

			latestToken.SetAuthHeader(localVarRequest)
		}

		// Basic HTTP Authentication
		if auth, ok := ctx.Value(ContextBasicAuth).(BasicAuth); ok {
			localVarRequest.SetBasicAuth(auth.UserName, auth.Password)
		}

		// AccessToken Authentication
		if auth, ok := ctx.Value(ContextAccessToken).(string); ok {
			localVarRequest.Header.Add("Authorization", "Bearer "+auth)
		}
	}

	for header, value := range c.cfg.DefaultHeader {
		localVarRequest.Header.Add(header, value)
	}

	return localVarRequest, nil
}

// Add a file to the multipart request
func addFile(w *multipart.Writer, fieldName, path string) error {
	file, err := os.Open(path)
	if err != nil {
		return err
	}
	defer file.Close()

	part, err := w.CreateFormFile(fieldName, filepath.Base(path))
	if err != nil {
		return err
	}
	_, err = io.Copy(part, file)

	return err
}

// Prevent trying to import "fmt"
func reportError(format string, a ...interface{}) error {
	return fmt.Errorf(format, a...)
}

// Set request body from an interface{}
func setBody(body interface{}, contentType string) (bodyBuf *bytes.Buffer, err error) {
	if bodyBuf == nil {
		bodyBuf = &bytes.Buffer{}
	}

	if reader, ok := body.(io.Reader); ok {
		_, err = bodyBuf.ReadFrom(reader)
	} else if b, ok := body.([]byte); ok {
		_, err = bodyBuf.Write(b)
	} else if s, ok := body.(string); ok {
		_, err = bodyBuf.WriteString(s)
	} else if jsonCheck.MatchString(contentType) {
		err = json.NewEncoder(bodyBuf).Encode(body)
	} else if xmlCheck.MatchString(contentType) {
		xml.NewEncoder(bodyBuf).Encode(body)
	}

	if err != nil {
		return nil, err
	}

	if bodyBuf.Len() == 0 {
		err = fmt.Errorf("Invalid body type %s\n", contentType)
		return nil, err
	}
	return bodyBuf, nil
}

// detectContentType method is used to figure out `Request.Body` content type for request header
func detectContentType(body interface{}) string {
	contentType := "text/plain; charset=utf-8"
	kind := reflect.TypeOf(body).Kind()

	switch kind {
	case reflect.Struct, reflect.Map, reflect.Ptr:
		contentType = "application/json; charset=utf-8"
	case reflect.String:
		contentType = "text/plain; charset=utf-8"
	default:
		if b, ok := body.([]byte); ok {
			contentType = http.DetectContentType(b)
		} else if kind == reflect.Slice {
			contentType = "application/json; charset=utf-8"
		}
	}

	return contentType
}

// Ripped from https://github.com/gregjones/httpcache/blob/master/httpcache.go
type cacheControl map[string]string

func parseCacheControl(headers http.Header) cacheControl {
	cc := cacheControl{}
	ccHeader := headers.Get("Cache-Control")
	for _, part := range strings.Split(ccHeader, ",") {
		part = strings.Trim(part, " ")
		if part == "" {
			continue
		}
		if strings.ContainsRune(part, '=') {
			keyval := strings.Split(part, "=")
			cc[strings.Trim(keyval[0], " ")] = strings.Trim(keyval[1], ",")
		} else {
			cc[part] = ""
		}
	}
	return cc
}

// CacheExpires helper function to determine remaining time before repeating a request.
func CacheExpires(r *http.Response) time.Time {
	// Figure out when the cache expires.
	var expires time.Time
	now, err := time.Parse(time.RFC1123, r.Header.Get("date"))
	if err != nil {
		return time.Now()
	}
	respCacheControl := parseCacheControl(r.Header)

	if maxAge, ok := respCacheControl["max-age"]; ok {
		lifetime, err := time.ParseDuration(maxAge + "s")
		if err != nil {
			expires = now
		}
		expires = now.Add(lifetime)
	} else {
		expiresHeader := r.Header.Get("Expires")
		if expiresHeader != "" {
			expires, err = time.Parse(time.RFC1123, expiresHeader)
			if err != nil {
				expires = now
			}
		}
	}
	return expires
}

func strlen(s string) int {
	return utf8.RuneCountInString(s)
}
